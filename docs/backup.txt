Copyright 2021~ PeTrA. All rights reserved.
Backup data.

-------------- 20210116
    # result, unans = traceroute(["github.com"], maxttl = 20, verbose = 0)

    # result.show()
    # print(result.show())
    # result.summary()
    # r = result.show()
    # result.show()

    target = "52.78.231.108"
    max_ttl = 40
    destination_port = 32323
    verbose_value = 0
    timeout_value = 3

    for i in range(1, max_ttl):
        print(i, " count..")
        # send_packet = IP(dst = target, ttl = i) / UDP(dport = destination_port)
        send_packet = IP(dst=target, ttl=i) / ICMP()
        response_packet = sr1(send_packet, verbose = verbose_value, timeout = timeout_value)

        if response_packet is not None:
            if response_packet.type == 0: # icmp echo reply
                print("finish !! " + response_packet.getlayer(IP).src)
                break
            else:
                print(response_packet.getlayer(IP).src)
        """
        if response_packet is None:
            break
        elif response_packet.type == 3:
            break
        else:
            print(i)
        """
-------------- 20210116

-------------- 20210130
   def probe_traceroute(self, _traceroute_target_protocol_address, _traceroute_max_ttl,
                         _traceroute_verbose, _traceroute_timeout):
        protocol_address_list = collections.deque()
        for current_ttl_value in range(1, _traceroute_max_ttl):
            # print(current_ttl_value, " hop..")
            total_node_count = total_node_count + 1
            send_packet = IP(dst = _traceroute_target_protocol_address, ttl = current_ttl_value) / ICMP()
            response_packet = sr1(send_packet, verbose = _traceroute_verbose, timeout = _traceroute_timeout)

            if response_packet is not None:
                if response_packet.type == 0:  # icmp echo reply
                    # print("finish !! " + response_packet.getlayer(IP).src)
                    protocol_address_list.append(response_packet.getlayer(IP).src)
                    break
                else:
                    # print(response_packet.getlayer(IP).src)
                    protocol_address_list.append(response_packet.getlayer(IP).src)


        # traceroute result check area
        # print("result_total_node_count = ", total_node_count)
        # print("result_protocol_address_list", protocol_address_list)

        return total_node_count, protocol_address_list
-------------- 20210130

-------------- 20210130
            elif HIVE_MAIN_COMMAND == "traceroute":
                while True:
                    HIVE_TRACEROUTE_COMMAND = self.get_command("traceroute")
                    if HIVE_TRACEROUTE_COMMAND == "?":
                        self.print_traceroute_option()
                        continue
                    elif HIVE_TRACEROUTE_COMMAND == "":
                        continue
                    elif HIVE_TRACEROUTE_COMMAND == "quit":
                        break
                    else: # something is put.
                        is_ip_address = is_protocol_address(HIVE_TRACEROUTE_COMMAND)
                        if is_ip_address == 0: # not ip address
                            self.print_ip_error()
                            continue
                        ###########################################################################
                        # here, traceroute function is needed.                                    #
                        #                                                                         #
                        ###########################################################################
                        continue
                    continue
                continue
-------------- 20210130

-------------- 20210211

# ProbeArrow/src/main.py;
from pip._vendor import requests


def main():
    # main_cui_engine = cui.Cui()
    # main_cui_engine.cui_engine()

    url = "http://ip-api.com/json/"
    target = "121.121.121.121"
    headers = {
        "User-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36"
    }
    try:
        response = requests.get(url = url + target, headers = headers)

    except ConnectionResetError:
        pass

    json_response = response.json()
    print(json_response)



    # try:
    #     request = urllib.request.get(url + target)
    #     response = urllib.request.urlopen(request).read()
    #     json_response = json.loads(response.decode("utf-8"))
    #     print(json_response["country"])
    # except ConnectionResetError:
    #
    #     print("??")
    #     return

################################
    # header = {
    #     "User-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36",
    #     "Accept-Encoding": "*",
    #     "Connection": "keep-alive"
    # }
    # response = requests.get(url = url + target)
    #
    #
    # json_response = response.json().get("country")
    # print(json_response)
################################

    # user_agent = {"User-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36"}
    # try:
    #     request = urllib.request.get(url + target, headers = {"User-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36"})
    #     response = urllib.request.urlopen(request).read()
    #     json_response = json.loads(response.decode("utf-8"))
    #     print(json_response["country"])
    # except ConnectionResetError:
    #
    #     print("??")
    #     return
################################

    # traceroute parameter value

    """
    traceroute_target_protocol_address = "github.com"
    traceroute_max_ttl = 40
    traceroute_verbose = 0
    traceroute_timeout = 3

    probe_check = probe.Probe()
    probe_check.probe_traceroute(traceroute_target_protocol_address, traceroute_max_ttl,
                                 traceroute_verbose, traceroute_timeout)

    """
    return

"""
    my_list = collections.deque()

    my_list.append("127.0.0.1")
    print(my_list)
    print(my_list[0])
    my_list.append("8.8.8.8")
    print(my_list)
    print(my_list[0])

    print(my_list[1])
    print(len(my_list))
"""

if __name__ == "__main__":
    main()
-------------- 20210212

20211123----------------

    """ @probe engine demo function. back up - 20210516
    def probe_demo(self, _traceroute_target_protocol_address, _traceroute_max_ttl,
                   _traceroute_verbose, _traceroute_timeout):
        self.reset_value()
        self.probe_set_traceroute_target_protocol_address(_traceroute_target_protocol_address)
        self.probe_set_traceroute_max_ttl(_traceroute_max_ttl)
        self.probe_set_traceroute_verbose(_traceroute_verbose)
        self.probe_set_traceroute_timeout(_traceroute_timeout)
        self.result_total_node_count, self.result_protocol_address_list, self.result_operation_system_list = \
            self.probe_traceroute(self.probe_get_traceroute_target_protocol_address(),
                                  self.probe_get_traceroute_max_ttl(),
                                  self.probe_get_traceroute_verbose(),
                                  self.probe_get_traceroute_timeout())
        return self.probe_get_result_protocol_address_list(), self.probe_get_result_operation_system_list(), \
               self.result_total_node_count  # ip list, os result
    """

    """ @probe traceroute function. back up - 20211020
    def probe_traceroute(self, _traceroute_target_protocol_address, _traceroute_max_ttl,
                         _traceroute_verbose, _traceroute_timeout, _traceroute_interface):
        protocol_address_list = collections.deque()
        operation_system_list = collections.deque()
        server_ttl_list = collections.deque()
        total_node_count = 0
        for current_ttl_value in range(1, _traceroute_max_ttl + 1):
            total_node_count = total_node_count + 1
            send_packet = IP(dst=_traceroute_target_protocol_address, ttl=current_ttl_value) / ICMP()
            response_packet = sr1(send_packet, verbose=_traceroute_verbose, timeout=_traceroute_timeout, iface=_traceroute_interface)

            if response_packet is not None:
                if response_packet.type == 0:  # icmp echo reply
                    protocol_address_list.append(response_packet.getlayer(IP).src) # ip address
                    operation_system, server_ttl = self.probe_operation_system(response_packet.getlayer(IP).ttl,
                                                                             total_node_count)
                    operation_system_list.append(operation_system) # operation system
                    server_ttl_list.append(server_ttl)
                    break
                else:
                    protocol_address_list.append(response_packet.getlayer(IP).src) # ip address
                    operation_system, server_ttl = self.probe_operation_system(response_packet.getlayer(IP).ttl,
                                                                             total_node_count)
                    operation_system_list.append(operation_system) # operation system
                    server_ttl_list.append(server_ttl)
            else:
                protocol_address_list.append("Unknown")
                operation_system_list.append("Unknown")
                server_ttl_list.append("Unknown")
        return total_node_count, protocol_address_list, operation_system_list, server_ttl_list, \
               self.probe_node_location(total_node_count, protocol_address_list)
    """
----------------20211123













20211204----------------
""" @cui run traceroute function. backup - 20211021
    def run_traceroute(self, _traceroute_target_protocol_address, _traceroute_max_ttl,
                       _traceroute_verbose, _traceroute_timeout, _traceroute_interface):
        print()
        print(" traceroute operation proceeding...")
        print()
        start_time = timeit.default_timer()
        probe_traceroute_instance = probe.Probe()
        result_protocol_address_list, result_system_operation_list, result_total_node_count, result_node_location, result_server_ttl_list = \
            probe_traceroute_instance.probe_engine(_traceroute_target_protocol_address, _traceroute_max_ttl,
                                                   _traceroute_verbose, _traceroute_timeout, _traceroute_interface)
        result = "\n"
        for i in range(0, result_total_node_count):
            result = result + " node " + str(i + 1) + " : " + str(result_protocol_address_list[i]) + \
                     " ( OS : " + str(result_system_operation_list[i]) + " )" + " ( GEO : " + str(result_node_location[i]) + " )" + " ( TTL : " + str(result_server_ttl_list[i]) + " )\n"
        end_time = timeit.default_timer()
        result = result + "\n" + " probe engine terminated (probe time : " + str(end_time - start_time) + " seconds)\n" \
                                                                                                          " Total nodes : " + str(
            result_total_node_count) + "\n"
        # print(result)
        return
"""
""" @demo trace route function. back up - 20210516
    def run_traceroute_demo(self, _traceroute_target_protocol_address, _traceroute_max_ttl,
                            _traceroute_verbose, _traceroute_timeout):
        start_time = timeit.default_timer()
        probe_traceroute_instance = probe.Probe()
        result_protocol_address_list, result_system_operation_list, result_total_node_count = \
            probe_traceroute_instance.probe_demo(_traceroute_target_protocol_address, _traceroute_max_ttl,
                                                 _traceroute_verbose, _traceroute_timeout)
        result = "\n"
        for i in range(0, result_total_node_count):
            result = result + " node " + str(i + 1) + " : " + str(result_protocol_address_list[i]) + \
                     " ( " + str(result_system_operation_list[i]) + " )\n"
        end_time = timeit.default_timer()
        result = result + "\n" + " probe engine terminated (probe time : " + str(end_time - start_time) + " seconds)\n" \
                                                                                                          " Total nodes : " + str(
            result_total_node_count) + "\n"
        print(result)
        return
"""
----------------20211204